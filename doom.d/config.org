#+TITLE: Justyn's Doom Config
#+STARTUP: folded

* TOC :TOC_3_gh:
- [[#references][References]]
  - [[#example-doom-literate-configs][Example Doom literate configs]]
  - [[#doomcasts][Doomcasts]]
- [[#things-i-need-to-work-on][Things I need to work on]]
- [[#doom-specific-config][Doom-specific Config]]
  - [[#doom-initel][Doom init.el]]
  - [[#default-doom-configel][Default Doom config.el]]
  - [[#default-packagesel][Default packages.el]]
  - [[#open-which-key-popup-quicker][Open which-key popup quicker]]
  - [[#keybinding-to-sync-doom-config][Keybinding to sync doom config]]
- [[#packages][Packages]]
  - [[#powerthesaurus][Powerthesaurus]]
  - [[#string-inflection][string-inflection]]
  - [[#beancount][beancount]]
- [[#local-config][Local config]]
  - [[#local-machine-overrides][Local machine overrides]]
  - [[#customizations][Customizations]]
- [[#org-mode][Org Mode]]
  - [[#general][General]]
  - [[#org-directories][Org Directories]]
  - [[#org-structure-template-shortcuts][Org Structure Template shortcuts]]
  - [[#org-agenda][Org Agenda]]
    - [[#general-settings][General settings]]
    - [[#org-todo-keywords][Org todo keywords]]
    - [[#custom-commands-and-agenda-views][Custom Commands and Agenda views]]
    - [[#org-clock][org-clock]]
    - [[#org-expiry][org-expiry]]
    - [[#org-super-agenda][org-super-agenda]]
  - [[#org-rifle-and-org-ql][org-rifle and org-ql]]
  - [[#org-journal][org-journal]]
  - [[#org-capture-templates][Org Capture Templates]]
  - [[#org-crypt][org-crypt]]
- [[#deft][Deft]]
- [[#keybindings][Keybindings]]
  - [[#useful-keybinding-reminders][Useful keybinding reminders]]
    - [[#convert-lists-between-orderednumbereunordered][Convert Lists between ordered/numbere/unordered]]
  - [[#keybindings-from-spacemacs][Keybindings from Spacemacs]]
    - [[#more-keybindings-from-spacemacs][More keybindings from spacemacs]]
  - [[#misc-keybindings][Misc Keybindings]]
  - [[#navigation][Navigation]]
- [[#display][Display]]
  - [[#window-size-and-position][Window Size and Position]]
  - [[#font-and-font-sizing][Font and font sizing]]
  - [[#theme][Theme]]
  - [[#move-to-new-split-windows][Move to new split windows]]
  - [[#indent-guides][Indent guides]]
  - [[#fix-flickering][Fix flickering]]
- [[#file-management][File management]]
  - [[#send-deleted-files-to-trash][Send deleted files to trash]]
- [[#editing][Editing]]
  - [[#general-editing-defaults][General Editing defaults]]
  - [[#tabs-vs-spaces][Tabs vs Spaces]]
  - [[#refresh-buffer-on-external-file-changes][Refresh buffer on external file changes]]
  - [[#unicode-elipsis][Unicode elipsis]]
  - [[#markdown-mode][Markdown Mode]]
  - [[#terraform][Terraform]]
- [[#version-control][Version Control]]
  - [[#magit][magit]]
  - [[#treemacs-magit][treemacs-magit]]
- [[#projectile][Projectile]]
- [[#ssh-and-gpg-agent][SSH and GPG Agent]]
- [[#tramp][Tramp]]
- [[#tags][Tags]]
- [[#evil-snipe][evil-snipe]]
- [[#backups-and-history][Backups and history]]
  - [[#backups-and-auto-save][Backups and auto-save]]
  - [[#history][History]]
- [[#hydra-paste][Hydra Paste]]
- [[#avy][Avy]]
- [[#pdf-viewing-and-editing][PDF Viewing and Editing]]
- [[#kubernetes---kubel][Kubernetes - kubel]]
- [[#yasnippet][yasnippet]]

* References

** Example Doom literate configs

Found and referenced several of these while working on updating my config.

- https://github.com/martinbaillie/dotfiles/blob/master/config/emacs/config.org
- https://github.com/murphytalk/doom.d/blob/master/README.org
- https://github.com/nmartin84/.doom.d/blob/master/config.org
- https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org
- https://noelwelsh.com/posts/2019-01-10-doom-emacs.html
- https://www.gtrun.org/custom/init.html
- https://www.reddit.com/r/emacs/comments/empzmz/doom_emacs_literate_config/
- https://tecosaur.github.io/emacs-config/config.html (really detailed and includes a lot of explanations/background)

** Doomcasts

These videos are a good intro to doom emacs and some of the common features.
https://www.youtube.com/watch?v=ywRExNOyybY&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=6

* Things I need to work on

Stuff I need to figure out for doom-emacs config

- [X] smart paste - In spacemacs, I can press =p= and then =C-j= and =C-k= to cycle between different kill rings
- [ ] Try [[https://github.com/bastibe/annotate.el][annotate mode]] like in [[https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org][this config]]
- [ ] Use gpg for all of my org files? (Wouldnt be able to access on android anymore though)
- [ ] Make more of a cheatsheet/reference for common keybindings
- [X] Setup deft?
- [X] Setup org-clock and my helper functions for it
- [ ] Setup and test lsp for terraform and python
- [ ] ctrl+enter doesn't work to add to lists in a terminal
- [ ] make =SPC /= work for searching project
- [ ] org-rifle
- [ ] better keybindings for moving between windows/panes
- [X] my =~/.ctags= config isn't getting picked up
- [ ] I think ivy is used for the minibuffer completion.  It's not as fuzzy as helm (I think?) was, so searching for files in a project is more annoying
- [X] get lsp working for terraform
- [X] clocking into a task doesn't clock out of the previous task anymore, leading to duplicate time
- [ ] How to get org-agenda to show overlapping times?
- [ ] Show clocked-in tasks in the daily agenda?
- [ ] Figure out how to get logged hours to show up in the agenda by default
- [ ] yasnippet or something else to insert current timestamp into buffer (I used to expand =ts= before)

* Doom-specific Config

Config related to Doom itself, or packages I probably wouldn't use if Doom wasn't using it.  This should also be the first section of my config and get added to the top of the file.

** Doom init.el

Refer to https://github.com/hlissner/doom-emacs/blob/develop/init.example.el for the latest upstream version to look for new modules/etc.

#+BEGIN_SRC emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-


;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;pretty-code       ; ligatures or substitute text with pretty symbols
       tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       format
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;; pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform           ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       tty                 ; improve the terminal Emacs experience
       macos             ; MacOS-specific commands

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +noter +dragndrop +pandoc +journal)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+END_SRC

** Default Doom config.el

This is what came in config.el when it first got generated.  I've moved some of it into other sections where it makes sense.  Eventually I'll move everything out.

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Justyn Shull"
      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+END_SRC
** Default packages.el

Empty packages.el file, but with the default comments.

#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+END_SRC

** Open which-key popup quicker

#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.25)
#+END_SRC
** Keybinding to sync doom config

First, a function which just runs doom sync/build.

#+BEGIN_SRC emacs-lisp
(defun justyn/doom-sync-and-build ()
  "Runs doom sync and then doom build"
  (interactive)
  (shell-command "doom sync && doom build"))

(defun justyn/doom-sync ()
  "Runs doom sync"
  (interactive)
  (shell-command "doom sync"))
#+END_SRC

And a keybinding for =SPC j d s=.  I should probably shorten this to something else, but I should also decide whether I want to try and reserve =SPC j= for myself or figure out a better prefix.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("j" . "justyn")
               (:prefix ("d" . "doom")
                        :desc "Doom sync" "s" #'justyn/doom-sync
                        :desc "Doom sync/build" "S" #'justyn/doom-sync-and-build)))
#+END_SRC
* Packages

I think I can split this up into other sections throughout the file, but I'm just leaving it here for now.

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! treemacs-magit)
(package! autorevert)
(package! powerthesaurus)
(package! org-mru-clock)
(package! keychain-environment)
(package! org-super-agenda)
(package! org-ql)
(package! helm-org-rifle)
;; (package! esup)
#+END_SRC
** Powerthesaurus

[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][Powerthesaurus]], use =SPC a p= to look up a synonym for the word at the cursor.

#+BEGIN_SRC elisp
(use-package! powerthesaurus
  :defer t)
(map! :leader
      (:prefix ("a" . "applications")
               :desc "Use powerthesaurus to fetch better word" "p" #'powerthesaurus-lookup-word-dwim))
#+END_SRC
** string-inflection

[[https://github.com/akicho8/string-inflection][string-inflection]], use =SPC a c= to cycle a word like this:
emacs_lisp => EMACS_LISP => EmacsLisp => emacsLisp => emacs-lisp => Emacs_Lisp => emacs_lisp

#+BEGIN_SRC elisp
(use-package! string-inflection
  :defer t)
(map! :leader
      (:prefix ("a" . "applications")
               :desc "Cycle through string case using String-inflection" "c" #'string-inflection-all-cycle))
#+END_SRC
** beancount

I use beancount to manage my plain text accounting files.  I usually use Fava instead of editing the files directly, but do occasionally have a reason to open the .beancount files too.

#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! beancount
  :recipe (:local-repo "ext/beancount"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! beancount
  :mode ("\\.beancount\\'" . beancount-mode)
  :defer t
  :init (add-hook 'beancount-mode-hook #'outline-minor-mode)
  :init)
#+END_SRC
* Local config
** Local machine overrides

Similar how I use =.bashrc.local=, this will load a =~/.doom.local.el= if it exists.  I use this to set personal/private things that either change depending on the machine I'm on or that I just don't want to commit to git.

#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/.doom.local.el")
    (load-file "~/.doom.local.el"))
#+END_SRC

** Customizations

Customizations made via emacs customization interface should go to a separate file instead of init.el which gets rewritten when this file is saved.

#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

* Org Mode
TODO:

- [X] org-mru-clock
- [X] org-mru-clock - clock recent task isn't working very well?
- [X] org-capture and templates
- [ ] open org-capture in vertical split
- [X] org-clock
- [ ] org-agenda
- [ ] org-habit
- [ ] org-expiry
- [ ] org-download (and screenshots)
- [ ] fold on startup
- [ ] shortcut for creating sparse tree from headers (Zaiste uses =SPC / s=, but I want =SPC /= for search in project)
- [ ] shortcut for creating sparse tree of tags (^ =SPC / t=)

** General

General settings that I don't know how to categorize yet.

#+BEGIN_SRC emacs-lisp
(after! org
  ;; Default Column View
  (setq org-columns-default-format "%5TODO %30ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM(Clocked) %3PRIORITY(PRI) %TAGS")

  ;; Enable speed commands for single-key commands at the beginning of headers.  ? for help  TODO: I don't really know what these do
  (setq org-use-speed-commands t)
  ;; Prettier code blocks
  (setq org-src-fontify-natively t)
  ;; Hide code blocks by default in org-mode
  '(org-hide-block-startup t)

  ;; Open .org files as folded by default
  (setq org-startup-folded 'overview)
  )
#+END_SRC

#+RESULTS:
: overview

** Org Directories

Set org-directory and dir for org-noter.

#+BEGIN_SRC emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads, so don't use after!
(setq org-directory "~/org/")
(setq org-noter-notes-search-path '("~/org/noter/"))
#+END_SRC
** Org Structure Template shortcuts

Access these by using =C-c C-,= and then using the shortcut for each one.  It adds the =+BEGIN_SRC= block for whichever item you choose.

#+BEGIN_SRC elisp
;; Shortcuts for org-structure templates (the +BEGIN_SRC type blocks)
;; This can be accessed by pressing C-c C-,
(after! org
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
  (add-to-list 'org-structure-template-alist '("y" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  )
#+END_SRC

** Org Agenda
*** General settings

#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-files (quote ("~/org/" "~/org/journal/")))
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))

  ;; Disable tag inheritence to speed up agenda rendering
  (setq org-agenda-use-tag-inheritance nil)
  ;; Disable dim blocked tasks to speed up agenda rendering
  (setq org-agenda-dim-blocked-tasks nil)
  ;; Don't prepare agenda buffers on startup
  (setq org-agenda-inhibit-startup t)
  ;; Don't kill agenda buffers, just hide them
  (setq org-agenda-sticky t)
  ;; Disable processing some org drawer properties to speed up the agenda rendering
  (setq org-agenda-ignore-drawer-properties '(effort appt category))
  ;; TODO: Do I want this?  It logs status changes into a LOGBOOK drawer instead of just as a list
  (setq org-log-into-drawer t)
  ;; Hide things that are done
  (setq org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t)
  ;; org-enforce-todo-checkbox-dependencies t
  ;; org-enforce-todo-dependencies t
  )
#+END_SRC
*** Org todo keywords

This isn't really org-agenda specific, but the agenda view is where I'd see this the most really.

#+BEGIN_SRC elisp
;; Keywords to use by default in .org files
(after! org
    (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i!)" "|" "DONE(d!)")
            (sequence "WAITING(w@/!)" "BLOCKED(b@/!)" "|" "CANCELLED(c@/!)")
            (sequence "[ ](T)" "[-](P)" "[?](M)" "|" "[X](D)"))))
#+END_SRC
*** Custom Commands and Agenda views

Depedencies needed before org-agenda will work.

#+BEGIN_SRC elisp
;; From https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

;; Also from above link, but do I really want to filter out habits?
(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))
#+END_SRC

#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((agenda "" ((org-agenda-span 2)))
          (todo "IN-PROGRESS"
                ((org-agenda-overriding-header "In-Progress tasks:")))
          (tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo 'done)
                                                (org-agenda-skip-entry-if 'todo '("IN-PROGRESS"))))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (todo "NEXT"
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)))
                 (org-agenda-overriding-header "NEXT tasks: ")))
          (todo "WAITING|BLOCKED"
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)))
                 (org-agenda-overriding-header "WAITING/BLOCKED tasks:")))
          ;; TODO: Figure out how to exclude readlater tag
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-entry-if 'todo '("NEXT" "IN-PROGRESS" "WAITING" "BLOCKED"))
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))
        ("n" todo "NEXT")
        ("w" todo "BLOCKED|WAITING")
        ("i" todo "IN-PROGRESS")
        ))
#+END_SRC
*** org-clock

I rely on a combination of org-clock and org-capture pretty heavily at work to track time on various tasks and reoccuring tasks/meetings.

- [ ] TODO: Install org-clock, org-mru-clock
- [ ] org-habit and org-expiry
- [ ] custom functions for clocking in/out

#+BEGIN_SRC elisp

#+END_SRC
**** Helper functions for clocking throughout the day

These functions mostly came from:

- https://gitlab.com/howardabrams/spacemacs.d/blob/master/layers/ha-org/funcs.el#L352
-  http://doc.norang.ca/org-mode.html#Clocking

I can use them to "clock-in" at the beginning of the day, and t hen use org-capture throughout the day to clock specific tasks I'm working on.  When I clock out of a specific task, it defaults to clocking back into the "default" task which is something in my todo.org that's just named "Misc. Time".

TODO: This is kind of messy right now; I should rewrite/refactor this into only what I need and use.

#+BEGIN_SRC elisp
;; From https://gitlab.com/howardabrams/spacemacs.d/blob/master/layers/ha-org/funcs.el#L352
(defun ha/org-capture-code-snippet (f)
  "Given a file, F, this captures the currently selected text
within an Org SRC block with a language based on the current mode
and a backlink to the function and the file."
  (with-current-buffer (find-buffer-visiting f)
    (let ((org-src-mode (replace-regexp-in-string "-mode" "" (format "%s" major-mode)))
          (func-name (which-function)))
      (ha/org-capture-fileref-snippet f "SRC" org-src-mode func-name))))

(defun ha/org-capture-clip-snippet (f)
  "Given a file, F, this captures the currently selected text
within an Org EXAMPLE block and a backlink to the file."
  (with-current-buffer (find-buffer-visiting f)
    (ha/org-capture-fileref-snippet f "EXAMPLE" "" nil)))

(defun ha/org-capture-fileref-snippet (f type headers func-name)
  (let* ((code-snippet
          (buffer-substring-no-properties (mark) (- (point) 1)))
         (file-name   (buffer-file-name))
         (file-base   (file-name-nondirectory file-name))
         (line-number (line-number-at-pos (region-beginning)))
         (initial-txt (if (null func-name)
                          (format "From [[file:%s::%s][%s]]:"
                                  file-name line-number file-base)
                        (format "From ~%s~ (in [[file:%s::%s][%s]]):"
                                func-name file-name line-number
                                file-base))))
    (format "
%s

#+BEGIN_%s %s
%s
#+END_%s" initial-txt type headers code-snippet type)))

(defun ha/code-to-clock (&optional start end)
  "Send the currently selected code to the currently clocked-in org-mode task."
  (interactive)
  (org-capture nil "F"))

(defun ha/code-comment-to-clock (&optional start end)
  "Send the currently selected code (with comments) to the
currently clocked-in org-mode task."
  (interactive)
  (org-capture nil "f"))

;; Helpful clock functions from http://doc.norang.ca/org-mode.html#Clocking
(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to IN-PROGRESS when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from IN-PROGRESS back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "IN-PROGRESS")
     ((and (member (org-get-todo-state) (list "IN-PROGRESS"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "EE4C523B-574F-4C5B-B270-9B3A340B7514")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

;; From https://gist.github.com/ironchicken/6b5424bc2024b3d0a58a8a130f73c2ee and
;; https://emacs.stackexchange.com/questions/32178/how-to-create-table-of-time-distribution-by-tags-in-org-mode
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
      (mapcar
       (lambda (file)
         (let ((clock-data (with-current-buffer (find-file-noselect file)
                             (org-clock-get-table-data (buffer-name) params))))
           (when (> (nth 1 clock-data) 0)
             (setq total (+ total (nth 1 clock-data)))
             (insert (format "| | File *%s* | %.2f |\n"
                             (file-name-nondirectory file)
                             (/ (nth 1 clock-data) 60.0)))
             (dolist (entry (nth 2 clock-data))
               (insert (format "| | . %s%s | %s %.2f |\n"
                               (org-clocktable-indent-string (nth 0 entry))
                               (nth 1 entry)
                               (clocktable-by-tag/shift-cell (nth 0 entry))
                               (/ (nth 4 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
        (re-search-backward "*Tag time*")
        (org-table-next-field)
        (org-table-blank-field)
        (insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     |          | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
              (clocktable-by-tag/insert-tag (plist-put (plist-put params :match tag) :tags tag)))
            tags)))

;; From https://emacs.stackexchange.com/questions/9502/category-based-clock-report
(defun private/clocktable-formatter-group-by-prop (ipos tables params)
  (let* ((formatter (or org-clock-clocktable-formatter
                        'org-clocktable-write-default))
         (ht (make-hash-table :test 'equal))
         (total 0)
         (grouped
          (dolist (tt tables (sort (hash-table-keys ht)
                                   #'(lambda (x y) (string< x y))))
            (setq total (+ total (nth 1 tt)))
            (dolist (record (nth 2 tt))
              (let* ((lasttwo (last record 2))
                     (time (pop lasttwo))
                     (prop (cdr (car (car lasttwo))))
                     (prev (gethash prop ht 0)))
                (puthash prop (+ prev time) ht))
              ))
          )
         (newtable (mapcar (lambda (arg) (list 1 arg nil nil (gethash arg ht) nil)) grouped))
         (new-params (org-plist-delete params :properties)))
    (funcall formatter ipos (list (list nil total newtable)) new-params)))

; TODO: This doesn't work. because I don't know how to lisp
(defun justyn/clock-in-recent-tasks ()
  (interactive)
  (setq current-prefix-arg 4)
  ; (universal-argument)
  (org-clock-in))
#+END_SRC

**** org-clock settings

#+BEGIN_SRC elisp
(after! org
  (use-package! org-mru-clock
    :config
    (setq org-mru-clock-how-many 50)
    )

  (setq org-clock-persist t)
  (org-clock-persistence-insinuate)

  (setq bh/keep-clock-running nil)
  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

  ;; Delete clocks that are 0:00
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Include current task in clock report
  (setq org-clock-report-include-clocking-task t)
  ;; Store clock history for longer
  (setq org-clock-history-length 15)
  ;; Clock report default params
  (setq org-agenda-clockreport-parameter-plist
        (quote (:link t :maxlevel 3 :fileskip0 t :compact t :narrow 100)))
  )
#+END_SRC
*** org-expiry

#+BEGIN_SRC elisp
(after! org
  (use-package! org-expiry
    :config
    (setq org-expiry-created-property-name "CREATED"
          org-expiry-inactive-timestamps t)
    (org-expiry-insinuate)
    )
  )
#+END_SRC
*** org-super-agenda

After reading https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/ and https://github.com/alphapapa/org-super-agenda, I realized org-super-agenda solves some of the issues I tried to fix in my regular org-agenda mode.  I copied the config from the first link to start with.

I'm not sure exactly why, but org-super-agenda is also extremely fast compared to the regular agenda.  The regular agenda takes over a minute to process my .org files and load sometimes.   org-super-agenda-mode loads within a few seconds.

#+BEGIN_SRC elisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-day nil ;; i.e. today
        org-agenda-span 1
        org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Super view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:name "In-Progress"
                                   :todo "IN-PROGRESS"
                                   :order 2)
                            (:name "Waiting/Blocked"
                                   :todo ("WAITING" "BLOCKED")
                                   :order 3)
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 4)
                            (:name "Due Today"
                                   :deadline today
                                   :order 5)
                            (:name "Overdue"
                                   :deadline past
                                   :order 6)
                            (:name "Scheduled Soon"
                                   :scheduled future
                                   :order 7)
                            (:name "Important"
                                   :priority "A"
                                   :order 8)
                            (:name "Meetings"
                                   :and (:todo "meeting" :scheduled future)
                                   :order 10)
                            (:discard (:not (:todo "TODO")))))))))))
:config
(org-super-agenda-mode))
#+END_SRC
** org-rifle and org-ql

org-ql can potentially replace org-rifle, but I haven't figured out the best way to do that yet.

Note that helm-org-rifle also brings in helm whereas the rest of this config currently uses ivy.  This causes some stuff like org-capture to automatically attempt to use helm instead of ivy.

org-rifle also shows some of the content when you're searching.  This is something I like because I sometimes have multiple notes with the same title/heading.

#+BEGIN_SRC emacs-lisp
(use-package! helm-org-rifle
  :defer t)
(map! :leader
      (:prefix ("j" . "justyn")
               (:desc "helm-org-rifle" "r" #'helm-org-rifle)))
#+END_SRC
** org-journal
:PROPERTIES:
:CREATED:  [2020-08-17 Mon 13:55]
:END:

- [ ] TODO: Enable encryption
- [ ] org-capture might not work if the org-journal file hasn't been created yet
- [ ] Do I even want to use org-journal?  I use org-capture to create entries so I'm already bypassing some of it

Helper function from https://github.com/bastibe/org-journal#journal-capture-template to figure out what the current org-journal file is.  I use this in my org-capture templates to figure out the correct place to store entries.

#+BEGIN_SRC emacs-lisp
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))

;;(org-journal-find-location)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (use-package! org-journal
;;   :defer t
;;   :config
;; (after! org-journal
;; TODO: I might want to use monthly instead?  I'm not sure if weekly will be too many files or not.
;; TODO: Store each journal entry into something like YYYY/MM/Week1.org
(setq org-journal-file-type "weekly")
(setq org-journal-dir "~/org/journal/")
(setq org-journal-file-format "%Y-%m-%d.org")
;; TODO: This breaks my agenda when non-nil, but I include ~/org anyways
(setq org-journal-enable-agenda-integration nil)
(setq org-journal-date-format "%A - %B %d, %Y")
(setq org-journal-file-header "#+TITLE: Weekly Worklog\n#+STARTUP: folded\n")
#+END_SRC

** Org Capture Templates

#+BEGIN_SRC elisp
;; Helper to determine what my current worklog .org file is
;; TODO: Also create the file with a template if needed
;; TODO: Test if this works when the month changes, and isn't evaluated during startup only
(defun justyn/current-worklog-file ()
  (expand-file-name (format-time-string "worklog-%Y-%m.org") org-directory)
  )
;; (justyn/current-worklog-file)

(after! org
  (setq org-capture-templates
        ;; TODO: Move some of these to a separate file not in git, since I don't need them in every computer
        '(("t" "Todo" entry (file+headline "~/org/TODO.org" "Tasks")
           "* TODO %?\nCREATED: %U\n%i\n%a")
          ("T" "Todo with Clipboard" entry (file+headline "~/org/TODO.org" "Tasks")
           "* TODO %?\nCREATED: %U\n%c"
           :empty-lines 1)
          ("r" "Read Later" entry (file+headline "~/org/TODO.org" "Read Later")
           "* TODO %?  :readlater:\nCREATED: %U")
          ("j" "Journal"
           entry (file+olp+datetree "~/org/journal.org.gpg")
           "* %? \nCREATED: %U\n%i\n%a"
           :empty-lines 1)
          ;; TODO: Use year in filename automatically
          ("w" "New WorkLog entry"
           entry (file+olp+datetree justyn/current-worklog-file)
           "* %? :work:\nCREATED: %T\n%i\n%a\n"
           :clock-in t
           :clock-resume t
           :empty-lines 1)
          ("W" "New Work Ticket"
           entry (file+olp+datetree justyn/current-worklog-file)
           "* IN-PROGRESS %^{TicketID}: %^{Title} :work:ticket:
:PROPERTIES:
:ID: %\\1
:CREATED: %T
:END:\n%?"
           :clock-in t
           :clock-resume t
           :empty-lines 1)
          ("n" "Append timestamped note to clocked task"
           plain (clock)
           "%U %?"
           :empty-lines 1)
          ("m" "Meeting"
           entry (file+olp+datetree justyn/current-worklog-file)
           "* Meeting for %^{Title} :work:meeting:\nCREATED: %T\nAgenda/Purpose: \nWho: \n\n - %?\n"
           :empty-lines 1
           :clock-in t
           :clock-resume t)
          ("M" "Adhoc Meeting(Chat/InPerson/Email/Etc)"
           entry (file+olp+datetree justyn/current-worklog-file)
           "* Adhoc meeting w/ %^{Who} about %^{What} :work:meeting:\nCREATED: %T\nWho: %\\1 \nNotes: %?\n"
           :empty-lines 1
           :clock-in t
           :clock-resume t)
          ("f" "Todo - Follow-up later today on e-mail/slack/etc"
           entry (file+olp+datetree justyn/current-worklog-file)
           "* NEXT [#A] %? :work:followup:\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\")) CREATED: %T\n"
           :empty-lines 1)
          ("v" "Code Reference with Comments to Current Task"
           plain (clock)
           "%?\n%(ha/org-capture-code-snippet \"%F\")\n\n"
           :empty-lines 1)
          ("V" "Link to Code Reference to Current Task"
           plain (clock)
           "%(ha/org-capture-code-snippet \"%F\")"
           :empty-lines 1 :immediate-finish t)
          ))
  )
#+END_SRC
** org-crypt

- [ ] TODO: Can I use multiple keys here?
- [ ] TODO: Create a shortcut for [[help:org-decrypt-entry][org-decrypt-entry]]
 
#+BEGIN_SRC emacs-lisp
(setq org-crypt-key "AA5A79D7AD584854")
#+END_SRC
* Deft

Deft is installed/enabled in init.el

#+BEGIN_SRC emacs-lisp
;; Deft settings
;; I created symlinks in ~/.deft pointing to my org notes/joplin/etc
(setq deft-directory "~/.deft"
      deft-extensions '("org" "md" "txt")
      deft-recursive t
      deft-default-extension "md"
      deft-text-mode 'org-mode

      ;; TODO: Figure out how to make this work with stuff like Joplin's markdown format
      ;; See https://jingsi.space/post/2017/04/05/organizing-a-complex-directory-for-emacs-org-mode-and-deft/
      deft-use-filename-as-title nil
      deft-use-filter-string-for-filename t
      deft-file-naming-rules '((nospace . "-")
                               (case-fn . downcase))
      ;; Limit the number of files Deft shows by default to speed it up
      deft-file-limit 100)
#+END_SRC
* Keybindings

Helpful tip, use =SPC ?= to see a list of all available keybindings.

This [[https://rameezkhan.me/adding-keybindings-to-doom-emacs/][blog post]] helped me to figure out how to add new keybindings for doom-emacs. Also see [[https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el][evil-bindings.el]] for additional examples.

** Useful keybinding reminders

TODO: I'll probably want to sort this into categories eventually.

| Key       | What                                                               |
| =SPC ,=   | Switch to another buffer in the current project                    |
| =SPC b b= | ^                                                                  |
| =SPC <=   | Show/switch to all buffers in a session                            |
| =SPC b B= | ^                                                                  |
| =SPC `=   | Switch to the last used buffer (=SPC b TAB= in spacemacs)          |
| =SPC b l= | ^                                                                  |
| =SPC o p= | Open treemacs in the project sidebar                               |
| =C-w w=   | Cycle through open windows                                         |
| =SPC 0=   | Go to the window to the left                                       |
| =SPC 1=   | Go to the window to the right                                      |
| =R=       | evil-multiedit - Select all matches at once                        |
| =M-d=     | evil-multiedit - start multicursor, keep pressing to expand search |

*** Convert Lists between ordered/numbere/unordered

If you have a list like this:

- item 1
- item 2
- item 3

You can change the - on the first item to a + or =1.= and then press =C-c C-c= and the rest of the list will automatically be updated to a numbered list.


** Keybindings from Spacemacs

I keep trying to use these key shortcuts, so re-bind them to work in Doom.

See these links for some discussion around this:

- https://github.com/hlissner/doom-emacs/issues/2542
- https://github.com/hlissner/doom-emacs/issues/940
- https://github.com/chenyanming/spacemacs_module_for_doom
  - This module can be loaded to include a lot of spacemacs default functionality and keymaps, but I'd rather keep my config limited to what I actually need/want (on top of Doom)

I'm used to using =SPC N= to switch to window N, and use some other =SPC w ...= keys pretty often.
#+BEGIN_SRC emacs-lisp
;; TODO: I'm not sure how to go to a specific window, so this really just goes left and right for now
(map! :leader
      (:desc "Window left" "1" #'evil-window-left
       :desc "Window right" "2" #'evil-window-right))
(map! :leader
      (:prefix ("w" . "window")
               (:desc "Window left" "1" #'evil-window-left
                :desc "Window right" "2" #'evil-window-right
                :desc "evil-window-vsplit" "|" #'evil-window-vsplit
                :desc "evil-window-vsplit" "/" #'evil-window-vsplit)))
#+END_SRC

Org clock shortcuts:
#+BEGIN_SRC elisp
;; TODO: Maybe map this to SPC m c like where doom puts the clock stuff currently?
(map! :leader
      (:prefix ("j" . "justyn")
               (:desc "org-mru-clock-in" "c" #'org-mru-clock-in
                :desc "org-mru-clock-select-recent-task" "C" #'org-mru-clock-select-recent-task
                :desc "bh/punch-in" "p" #'bh/punch-in
                :desc "bh/punch-out" "P" #'bh/punch-out
                :desc "org-save-all-org-buffers" "s" #'org-save-all-org-buffers)))
#+END_SRC
*** TODO More keybindings from spacemacs

These are all from =SPC 0= which is "custom" for Spacemacs.  Doom uses it for "open" by default.  I'm not sure whether there's an equivalent to "custom" for doom that doom won't override.

- [ ] o == custom
- [X] op = punch-in
- [X] oP = punch-out
- [ ] oC = calculator
- [X] oc = org-mru-clock-in
- [X] os = org-save-all-org-buffers
- [ ] oq = auto-fill-mode
** Misc Keybindings

#+BEGIN_SRC emacs-lisp
;; Select-all
(map! "M-a" #'mark-whole-buffer)
;; Save
(map! "M-s" #'save-buffer)
;; Paste menu
(map! "M-v" #'counsel-yank-pop)
#+END_SRC

** Navigation

Use Control + hjkl to move around windows in a frame.

#+BEGIN_SRC emacs-lisp
(map!
 :n "C-h" #'evil-window-left
 :n "C-j" #'evil-window-down
 :n "C-k" #'evil-window-up
 :n "C-l" #'evil-window-right
 )
#+END_SRC

The above only works in normal mode.  We have to add the same mapping for the treemacs mode.

#+BEGIN_SRC emacs-lisp
(map!
 (:map evil-treemacs-state-map
       "C-h" #'evil-window-left
       "C-l" #'evil-window-right)
 )
#+END_SRC

* Display
** Window Size and Position

This is from https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#center-emacs-initial-frame-with-a-fixed-size
#+BEGIN_SRC emacs-lisp
;; On startup, restore the last-used window size and position
(when-let (dims (doom-store-get 'last-frame-size))
  (cl-destructuring-bind ((left . top) width height fullscreen) dims
    (setq initial-frame-alist
          (append initial-frame-alist
                  `((left . ,left)
                    (top . ,top)
                    (width . ,width)
                    (height . ,height)
                    (fullscreen . ,fullscreen))))))

(defun save-frame-dimensions ()
  (doom-store-put 'last-frame-size
                  (list (frame-position)
                        (frame-width)
                        (frame-height)
                        (frame-parameter nil 'fullscreen))))

;; When we kill emacs, save the current window size and position
(add-hook 'kill-emacs-hook #'save-frame-dimensions)
#+END_SRC

I found this in the "better defaults" of https://tecosaur.github.io/emacs-config/config.html#better-defaults

#+begin_src emacs-lisp
(setq window-combination-resize t)
#+end_src

** Font and font sizing

TODO: Change font depending on OS?

#+BEGIN_SRC elisp
;; Add a small amount of extra space in between each line
(setq line-spacing 2)
#+END_SRC
** Theme

Lots of doom-specific themes available at https://github.com/hlissner/emacs-doom-themes
Screenshots available at: https://github.com/hlissner/emacs-doom-themes/tree/screenshots

Themes I like so far:

- doom-one - default theme, a little too dark for the comments
- doom-vibrant - almost the same as the default theme, but a little brighter
- doom-horizon - dark, more colorful than vibrant
- doom-tomorrow-night
- doom-material
- doom-dark+ - dark theme ported from VSCode

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-vibrant)
(load-theme doom-theme t)
#+END_SRC

#+RESULTS:
: t

** Move to new split windows

#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC
** Indent guides

Saw a screenshot from https://old.reddit.com/r/emacs/comments/esgzjf/new_dark_theme_ported_from_vs_code_avaliable_now/ which included
https://github.com/DarthFennec/highlight-indent-guides

This package is installed/loaded from https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/indent-guides

#+begin_src emacs-lisp
(setq highlight-indent-guides-responsive 'stack)
#+end_src
** Fix flickering

Since I upgraded to Big Sur, emacs seems to "flicker" a lot.  This should help prevent that.

Reference:

- https://github.com/hlissner/doom-emacs/issues/2989
- https://old.reddit.com/r/emacs/comments/ecctcp/how_to_debug_emacs_flickering_issue/
- https://old.reddit.com/r/emacs/comments/jx0uog/has_anyone_else_noticed_some_flickering_on_big_sur/
- https://old.reddit.com/r/emacs/comments/fbb4mm/how_to_debug_flickering/

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
(setq display-line-numbers-type nil)
#+end_src

* File management
** Send deleted files to trash
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t)
#+end_src
* Editing
** General Editing defaults

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src
** Tabs vs Spaces

Use spaces instead of tabs by default, and set the default indent width to 2.  The =editorconfig= package/module should allow this to be overriden per project or repository.

- [ ] TODO:  Some languages like go want to use tabs by default, I should make sure that still happens.
- [ ] TODO:  =tab-width= only affects display, not actual number of spaces afaik

#+BEGIN_SRC elisp
(setq indent-tabs-mode nil
      tab-width 2)
#+END_SRC
** Refresh buffer on external file changes

From https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org - automatically refresh the buffer if a file is changed outside of emacs.

#+BEGIN_SRC elisp
(use-package! autorevert
  :defer t
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        auto-revert-verbose nil))
#+END_SRC
** Unicode elipsis

From https://tecosaur.github.io/emacs-config/config.html

#+BEGIN_SRC emacs-lisp
(setq truncate-string-ellipsis "…")
#+END_SRC

** Markdown Mode

Enable things like wiki-style links so that I can more easily work with external editors/tools like [[https://obsidian.md/][Obsidian]].

#+BEGIN_SRC emacs-lisp
(setq markdown-enable-wiki-links t
      markdown-enable-math t
      markdown-fontify-code-blocks-natively t
      markdown-wiki-link-search-subdirectories t)
#+END_SRC
** Terraform

Enables Terraform LSP support.  Install the language server following the instructions on https://github.com/hashicorp/terraform-ls/blob/main/docs/USAGE.md

#+begin_src emacs-lisp
(after! lsp
  :config
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("/usr/local/bin/terraform-ls" "serve"))
                      :major-modes '(terraform-mode)
                      :server-id 'terraform-ls))

    (add-hook 'terraform-mode-hook #'lsp)
  )
#+end_src

* Version Control
** magit

See https://emacs.stackexchange.com/questions/32634/how-can-the-list-of-projects-used-by-projectile-be-manually-updated for an explanation.  This tells magit to look in ~/dev recursively.  My project structure is nested somewhat deep, but shouldn't be more than 4 nested directories.

#+BEGIN_SRC emacs-lisp
(after! magit
  :config
  ;; Set the directory where magit looks for repos in
  (setq magit-repository-directories '(("~/dev/" . 4))
        ;; Don't automatically save buffers when running magit
        magit-save-repository-buffers nil)
  )
(after! projectile
  :config
  (when (require 'magit nil t)
    (mapc #'projectile-add-known-project
          (mapcar #'file-name-as-directory (magit-list-repos)))
    ;; Optionally write to persistent `projectile-known-projects-file'
    (projectile-save-known-projects)))
#+END_SRC

Show gravatars for commit authors
#+BEGIN_SRC emacs-lisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC
** treemacs-magit
#+BEGIN_SRC emacs-lisp
(use-package! treemacs-magit
  :defer t
  :after (treemacs magit))
#+END_SRC
* Projectile

Use =SPC p D= to run discover projects in the search path.

This seems to only search one folder deep, so if you use a path of =~/dev= it detects =~/dev/proj1= but it will not detect something like =~/dev/clients/clientA/proj2=.

- [X] TODO: Can I use wildcards somehow?
- [ ] TODO: Discover projects in ~/dev/*/*/* (2 or 3 levels nested)
- [ ] TODO: my .gitignore isn't being honored anymore

#+BEGIN_SRC emacs-lisp
;; (setq projectile-project-search-path '("~/dev/" "~/dev/clients/"))
;; Found on https://github.com/bbatsov/projectile/issues/1500
;; TODO: This still isn't recursive more than one level
(setq projectile-project-search-path (cddr (directory-files "~/dev" t)))
#+END_SRC

Projectile's indexing should be set to 'alien' by default, but hybrid still allows projectile to do some post-processing of the list of files returned inside of emacs.

#+begin_src emacs-lisp
(setq projectile-indexing-mode 'hybrid)
#+end_src

* SSH and GPG Agent

Attempt to source the env vars from keychain.
#+BEGIN_SRC elisp
;; Source ssh-agent from keychain
(keychain-refresh-environment)
#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp
;; Use /sshx because /ssh doesn't seem to work on bsd, and some of my
;; remote shells don't use sh/bash.  ssh/sshx should also be faster than scp
(setq tramp-default-method "sshx")
#+END_SRC
* Tags

I have a custom configuration for ctags stored in [[file:~/.ctags][~/.ctags]] that works with some additional languages like terraform, and excludes a lot of things like =node_modules= and =.terraform/modules= which causes the tags file to be too large.

#+BEGIN_SRC emacs-lisp
;; Use my default ctags configuration which excludes a lot of things we don't want
(setq projectile-tags-command (concat "ctags --options=" (expand-file-name "~/.ctags") " -Re -f \"%s\" %s \"%s\""))
#+END_SRC
* evil-snipe

#+BEGIN_SRC emacs-lisp
(use-package! evil-snipe
  :defer t
  :config
  ;; Alias [ and ] to all types of brackets
  ;; With this, I can use evil-snipe by pressing f and then [ and it will search for any of these types of brackets
  (push '(?\[ "[[{(]") evil-snipe-aliases)
  (push '(?\] "[]})]") evil-snipe-aliases)
  (setq evil-snipe-scope 'visible)
  (setq evil-snipe-repeat-scope 'buffer)
  (setq evil-snipe-spillover-scope 'whole-buffer))
#+END_SRC
* Backups and history

** Backups and auto-save

Doom disables auto-save and backups by default, but doom/emacs has crashed enough times on me that I would rather have it on.  I can turn off backups for sensitive/encrypted gpg files separately.  I do not, however, need or want lock files for every file as they cause issues with Nextcloud.

Even though Doom disables backups, it does still configure [[help:backup-directory-alist][backup-directory-alist]] and other variables.

- TODO: I might want to change the backup location so that directories don't get cluttered if they go to the cwd.

#+BEGIN_SRC emacs-lisp
(setq
 auto-save-default t
 make-backup-files t
 create-lockfiles nil
 )
#+END_SRC
** History

I was running into issues with Emacs using up 100% of my cpu for a while when it was basically idle.  One of the issues ended up being that there was no history limit, or it was really long.

#+BEGIN_SRC emacs-lisp
;; Try to prevent emacs from using 100% cpu due to autosave
;; See https://github.com/syl20bnr/spacemacs/issues/9409
(setq history-length 350)
(put 'minibuffer-history 'history-length 50)
(put 'evil-ex-history 'history-length 50)
(put 'kill-ring 'history-length 25)
#+END_SRC

From https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org
#+BEGIN_SRC emacs-lisp
(use-package! recentf
  :defer t
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup "05:00am")
  (recentf-max-saved-items 200)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)
#+END_SRC
* Hydra Paste

From https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#create-a-paste-transient-state-to-cycle-through-kill-ring-on-paste

This lets me paste something and then cycle through the kill ring.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-paste (:color red
                       :hint nil)
  "\n[%s(length kill-ring-yank-pointer)/%s(length kill-ring)] \
 [_C-j_/_C-k_] cycles through yanked text, [_p_/_P_] pastes the same text \
 above or below. Anything else exits."
  ("C-j" evil-paste-pop)
  ("C-k" evil-paste-pop-next)
  ("p" evil-paste-after)
  ("P" evil-paste-before))

(map! :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)
#+END_SRC
* Avy

Search all open windows
#+BEGIN_SRC elisp
(setq avy-all-windows t)
#+END_SRC
* PDF Viewing and Editing

Keys:

 - C-j / C-k - Scroll up/down a page

TODO: I'm not sure if I like using emacs as a pdf viewer, so I might just remove this.
TODO: Can I select something and have it annotate a specific sentence/paragraph?   org-noter-insert-note just marks the page number.

#+BEGIN_SRC elisp
(after! pdf-view
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-width)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t
        org-noter-insert-note-no-questions t
        pdf-view-resize-factor 1.1)
  ;; faster motion
  (map!
   :map pdf-view-mode-map
   :n "g g"          #'pdf-view-first-page
   :n "G"            #'pdf-view-last-page
   :localleader
   (:desc "Insert" "i" 'org-noter-insert-note)
   ))
#+END_SRC
* Kubernetes - kubel

Install [[https://github.com/abrochard/kubel][kubel]]

TODO: Mostly just testing this for now.  I'm actually liking k9s better if I want any sort of kubernetes UI

#+BEGIN_SRC emacs-lisp :tangle packages.el
;; (package! kubel)
;; (package! kubel-evil)
#+END_SRC

And load it

#+BEGIN_SRC emacs-lisp
;; (use-package! kubel)
;; (use-package! kubel-evil)
#+END_SRC
* yasnippet

=:editor snippets= is enabled in =init.el=, we just need to enable yasnippet's global mode.

#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC
