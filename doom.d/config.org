#+TITLE: Justyn's Doom Config

* TOC :TOC_3_gh:
- [[#references][References]]
  - [[#example-doom-literate-configs][Example Doom literate configs]]
  - [[#doomcasts][Doomcasts]]
- [[#things-i-need-to-work-on][Things I need to work on]]
- [[#doom-specific-config][Doom-specific Config]]
  - [[#default-doom-configel][Default Doom config.el]]
  - [[#open-which-key-popup-quicker][Open which-key popup quicker]]
- [[#packages][Packages]]
  - [[#powerthesaurus][Powerthesaurus]]
  - [[#string-inflection][string-inflection]]
- [[#org-mode][Org Mode]]
  - [[#general][General]]
  - [[#org-directories][Org Directories]]
  - [[#org-structure-template-shortcuts][Org Structure Template shortcuts]]
  - [[#org-agenda][Org Agenda]]
    - [[#general-settings][General settings]]
    - [[#org-todo-keywords][Org todo keywords]]
    - [[#custom-commands-and-agenda-views][Custom Commands and Agenda views]]
    - [[#org-clock][org-clock]]
  - [[#org-capture-templates][Org Capture Templates]]
- [[#keybindings][Keybindings]]
  - [[#useful-keybinding-reminders][Useful keybinding reminders]]
    - [[#convert-lists-between-orderednumbereunordered][Convert Lists between ordered/numbere/unordered]]
  - [[#keybindings-from-spacemacs][Keybindings from Spacemacs]]
    - [[#more-keybindings-from-spacemacs][More keybindings from spacemacs]]
  - [[#misc-keybindings][Misc Keybindings]]
  - [[#navigation][Navigation]]
- [[#display][Display]]
  - [[#window-size-and-position][Window Size and Position]]
  - [[#font-and-font-sizing][Font and font sizing]]
  - [[#theme][Theme]]
  - [[#move-to-new-split-windows][Move to new split windows]]
- [[#editing][Editing]]
  - [[#tabs-vs-spaces][Tabs vs Spaces]]
  - [[#refresh-buffer-on-external-file-changes][Refresh buffer on external file changes]]
- [[#version-control][Version Control]]
  - [[#magit][magit]]
  - [[#treemacs-magit][treemacs-magit]]
- [[#projectile][Projectile]]
- [[#tramp][Tramp]]
- [[#tags][Tags]]
- [[#evil-snipe][evil-snipe]]
- [[#backups-and-history][Backups and history]]
- [[#hydra-paste][Hydra Paste]]
- [[#avy][Avy]]

* References

** Example Doom literate configs

Found and referenced several of these while working on updating my config.

- https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org
- https://noelwelsh.com/posts/2019-01-10-doom-emacs.html
- https://github.com/nmartin84/.doom.d/blob/master/config.org
- https://www.reddit.com/r/emacs/comments/empzmz/doom_emacs_literate_config/
- https://github.com/martinbaillie/dotfiles/blob/master/config/emacs/config.org

** Doomcasts

These videos are a good intro to doom emacs and some of the common features.
https://www.youtube.com/watch?v=ywRExNOyybY&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=6

* Things I need to work on

Stuff I need to figure out for doom-emacs config

- [X] smart paste - In spacemacs, I can press =p= and then =C-j= and =C-k= to cycle between different kill rings
- [ ] Try [[https://github.com/bastibe/annotate.el][annotate mode]] like in [[https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org][this config]]
- [ ] Use gpg for all of my org files? (Wouldnt be able to access on android anymore though)
- [ ] Make more of a cheatsheet/reference for common keybindings
- [ ] Setup deft?
- [ ] Setup org-clock and my helper functions for it
- [ ] Setup and test lsp for terraform and python
- [ ] ctrl+enter doesn't work to add to lists in a terminal
- [ ] make =SPC /= work for searching project



* Doom-specific Config

Config related to Doom itself, or packages I probably wouldn't use if Doom wasn't using it.  This should also be the first section of my config and get added to the top of the file.

** Default Doom config.el

This is what came in config.el when it first got generated.  I've moved some of it into other sections where it makes sense.  Eventually I'll move everything out.

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Justyn Shull"
      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC
** Open which-key popup quicker

#+BEGIN_SRC emacs-lisp
(setq which-key-idle-delay 0.25)
#+END_SRC
* Packages

I think I can split this up into other sections throughout the file, but I'm just leaving it here for now.

TODO: Tangle this to packages.el
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Powerthesaurus

[[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][Powerthesaurus]], use =SPC a p= to look up a synonym for the word at the cursor.

#+BEGIN_SRC elisp
(use-package! powerthesaurus
  :defer t)
(map! :leader
      (:prefix ("a" . "applications")
               :desc "Use powerthesaurus to fetch better word" "p" #'powerthesaurus-lookup-word-dwim))
#+END_SRC
** string-inflection

[[https://github.com/akicho8/string-inflection][string-inflection]], use =SPC a c= to cycle a word like this:
emacs_lisp => EMACS_LISP => EmacsLisp => emacsLisp => emacs-lisp => Emacs_Lisp => emacs_lisp

#+BEGIN_SRC elisp
(use-package! string-inflection
  :defer t)
(map! :leader
      (:prefix ("a" . "applications")
               :desc "Cycle through string case using String-inflection" "c" #'string-inflection-all-cycle))
#+END_SRC
* Org Mode
TODO:

- [ ] org-mru-clock
- [ ] org-capture and templates
- [ ] org-clock
- [ ] org-agenda
- [ ] org-habit
- [ ] org-expiry
- [ ] org-download (and screenshots)
- [ ] fold on startup
- [ ] shortcut for creating sparse tree from headers (Zaiste uses =SPC / s=, but I want =SPC /= for search in project)
- [ ] shortcut for creating sparse tree of tags (^ =SPC / t=)

** General

General settings that I don't know how to categorize yet.

#+BEGIN_SRC emacs-lisp
(after! org
  ;; Default Column View
  (setq org-columns-default-format "%5TODO %30ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM(Clocked) %3PRIORITY(PRI) %TAGS")

  ;; Enable speed commands for single-key commands at the beginning of headers.  ? for help  TODO: I don't really know what these do
  (setq org-use-speed-commands t)
  ;; Prettier code blocks
  (setq org-src-fontify-natively t)
  ;; Hide code blocks by default in org-mode
  '(org-hide-block-startup t)
  )
#+END_SRC

** Org Directories

Set org-directory and dir for org-noter.

#+BEGIN_SRC emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
(setq org-noter-notes-search-path '("~/org/noter/"))
#+END_SRC
** Org Structure Template shortcuts

Access these by using =C-c C-,= and then using the shortcut for each one.  It adds the =+BEGIN_SRC= block for whichever item you choose.

#+BEGIN_SRC elisp
;; Shortcuts for org-structure templates (the +BEGIN_SRC type blocks)
;; This can be accessed by pressing C-c C-,
(after! org
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
  (add-to-list 'org-structure-template-alist '("y" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  )
#+END_SRC

** Org Agenda
*** General settings

#+BEGIN_SRC elisp
(after! org
  (setq org-agenda-files (quote ("~/org/")))
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))

  ;; Disable tag inheritence to speed up agenda rendering
  (setq org-agenda-use-tag-inheritance nil)
  ;; Disable dim blocked tasks to speed up agenda rendering
  (setq org-agenda-dim-blocked-tasks nil)
  ;; Don't prepare agenda buffers on startup
  (setq org-agenda-inhibit-startup t)
  ;; Don't kill agenda buffers, just hide them
  (setq org-agenda-sticky t)
  ;; Disable processing some org drawer properties to speed up the agenda rendering
  (setq org-agenda-ignore-drawer-properties '(effort appt category))
  )
#+END_SRC
*** Org todo keywords

This isn't really org-agenda specific, but the agenda view is where I'd see this the most really.

#+BEGIN_SRC elisp
;; Keywords to use by default in .org files
(after! org
    (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i!)" "|" "DONE(d!)")
            (sequence "WAITING(w@/!)" "BLOCKED(b@/!)" "|" "CANCELLED(c@/!)")
            (sequence "[ ](T)" "[-](P)" "[?](M)" "|" "[X](D)"))))
#+END_SRC
*** Custom Commands and Agenda views

#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((agenda "" ((org-agenda-span 2)))
          (todo "IN-PROGRESS"
                ((org-agenda-overriding-header "In-Progress tasks:")))
          (tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo 'done)
                                                (org-agenda-skip-entry-if 'todo '("IN-PROGRESS"))))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (todo "NEXT"
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)))
                 (org-agenda-overriding-header "NEXT tasks: ")))
          (todo "WAITING|BLOCKED"
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)))
                 (org-agenda-overriding-header "WAITING/BLOCKED tasks:")))
          ;; TODO: Figure out how to exclude readlater tag
          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-entry-if 'todo '("NEXT" "IN-PROGRESS" "WAITING" "BLOCKED"))
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))
        ("n" todo "NEXT")
        ("w" todo "BLOCKED|WAITING")
        ("i" todo "IN-PROGRESS")
        ))
#+END_SRC
*** org-clock

I rely on a combination of org-clock and org-capture pretty heavily at work to track time on various tasks and reoccuring tasks/meetings.

- [ ] TODO: Install org-clock, org-mru-clock
- [ ] org-habit and org-expiry
- [ ] custom functions for clocking in/out

#+BEGIN_SRC elisp

#+END_SRC

** Org Capture Templates

#+BEGIN_SRC elisp
(setq org-capture-templates
      ;; TODO: Move some of these to a separate file not in git, since I don't need them in every computer
      '(("t" "Todo" entry (file+headline "~/org/TODO.org" "Tasks")
         "* TODO %?\nCREATED: %U\n%i\n%a")
        ("T" "Todo with Clipboard" entry (file+headline "~/org/TODO.org" "Tasks")
         "* TODO %?\nCREATED: %U\n%c"
         :empty-lines 1)
        ("r" "Read Later" entry (file+headline "~/org/TODO.org" "Read Later")
         "* TODO %?  :readlater:\nCREATED: %U")
        ("j" "Journal"
         entry (file+datetree "~/org/journal.org")
         "* %? \nCREATED: %U\n%i\n%a"
         :empty-lines 1)
        ;; TODO: Use year in filename automatically
        ("w" "New WorkLog entry"
         entry (file+datetree "~/org/worklog_2020.org")
         "* %? :work:\nCREATED: %T\n%i\n%a\n"
         :clock-in t
         :clock-resume t
         :empty-lines 1)
        ("W" "New Work Ticket"
         entry (file+datetree "~/org/worklog_2020.org")
         "* IN-PROGRESS %^{TicketID}: %^{Title} :work:ticket:
:PROPERTIES:
:ID: %\\1
:BI_ENVIRONMENT: %^{BI_ENVIRONMENT}
:BI_CUSTOMER: %^{BI_CUSTOMER}
:CREATED: %T
:END:\n%?"
         :clock-in t
         :clock-resume t
         :empty-lines 1)
        ("n" "Append timestamped note to clocked task"
         plain (clock)
         "%U %?"
         :empty-lines 1)
        ("m" "Meeting"
         entry (file+datetree "~/org/worklog_2020.org")
         "* Meeting for %^{Title} :work:meeting:\nCREATED: %T\nAgenda/Purpose: \nWho: \n\n - %?\n"
         :empty-lines 1
         :clock-in t
         :clock-resume t)
        ("M" "Adhoc Meeting(Chat/InPerson/Email/Etc)"
         entry (file+datetree "~/org/worklog_2020.org")
         "* Adhoc meeting w/ %^{Who} about %^{What} :work:meeting:\nCREATED: %T\nWho: %\\1 \nNotes: %?\n"
         :empty-lines 1
         :clock-in t
         :clock-resume t)
        ("f" "Todo - Follow-up later today on e-mail/slack/etc"
         entry (file+datetree "~/org/worklog_2020.org")
         "* NEXT [#A] %? :work:followup:\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\")) CREATED: %T\n"
         :empty-lines 1)
        ("v" "Code Reference with Comments to Current Task"
         plain (clock)
         "%?\n%(ha/org-capture-code-snippet \"%F\")\n\n"
         :empty-lines 1)
        ("V" "Link to Code Reference to Current Task"
         plain (clock)
         "%(ha/org-capture-code-snippet \"%F\")"
         :empty-lines 1 :immediate-finish t)
        ))
#+END_SRC

* Keybindings

Helpful tip, use =SPC ?= to see a list of all available keybindings.

This [[https://rameezkhan.me/adding-keybindings-to-doom-emacs/][blog post]] helped me to figure out how to add new keybindings for doom-emacs. Also see [[https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el][evil-bindings.el]] for additional examples.

** Useful keybinding reminders

TODO: I'll probably want to sort this into categories eventually.

| Key       | What                                                               |
| =SPC ,=   | Switch to another buffer in the current project                    |
| =SPC b b= | ^                                                                  |
| =SPC <=   | Show/switch to all buffers in a session                            |
| =SPC b B= | ^                                                                  |
| =SPC `=   | Switch to the last used buffer (=SPC b TAB= in spacemacs)          |
| =SPC b l= | ^                                                                  |
| =SPC o p= | Open treemacs in the project sidebar                               |
| =C-w w=   | Cycle through open windows                                         |
| =SPC 0=   | Go to the window to the left                                       |
| =SPC 1=   | Go to the window to the right                                      |
| =R=       | evil-multiedit - Select all matches at once                        |
| =M-d=     | evil-multiedit - start multicursor, keep pressing to expand search |

*** Convert Lists between ordered/numbere/unordered

If you have a list like this:

- item 1
- item 2
- item 3

You can change the - on the first item to a + or =1.= and then press =C-c C-c= and the rest of the list will automatically be updated to a numbered list.


** Keybindings from Spacemacs

I keep trying to use these key shortcuts, so re-bind them to work in Doom.

See these links for some discussion around this:

- https://github.com/hlissner/doom-emacs/issues/2542
- https://github.com/hlissner/doom-emacs/issues/940
- https://github.com/chenyanming/spacemacs_module_for_doom
  - This module can be loaded to include a lot of spacemacs default functionality and keymaps, but I'd rather keep my config limited to what I actually need/want (on top of Doom)

I'm used to using =SPC N= to switch to window N, and use some other =SPC w ...= keys pretty often.
#+BEGIN_SRC emacs-lisp
;; TODO: I'm not sure how to go to a specific window, so this really just goes left and right for now
(map! :leader
      (:desc "Window left" "1" #'evil-window-left
       :desc "Window right" "2" #'evil-window-right))
(map! :leader
      (:prefix ("w" . "window")
               (:desc "Window left" "1" #'evil-window-left
                :desc "Window right" "2" #'evil-window-right
                :desc "evil-window-vsplit" "|" #'evil-window-vsplit)))
#+END_SRC
*** TODO More keybindings from spacemacs

These are all from =SPC 0= which is "custom" for Spacemacs.  Doom uses it for "open" by default.  I'm not sure whether there's an equivalent to "custom" for doom that doom won't override.

- [ ] o == custom
- [ ] op = punch-in
- [ ] oP = punch-out
- [ ] oC = calculator
- [ ] oc = org-mru-clock-in
- [ ] os = org-save-all-org-buffers
- [ ] oq = auto-fill-mode
** Misc Keybindings

#+BEGIN_SRC emacs-lisp
;; Select-all
(map! "M-a" #'mark-whole-buffer)
;; Save
(map! "M-s" #'save-buffer)
;; Paste menu
(map! "M-v" #'counsel-yank-pop)
#+END_SRC

** Navigation

Use Control + hjkl to move around windows in a frame.

#+BEGIN_SRC emacs-lisp
(map!
 :n "C-h" #'evil-window-left
 :n "C-j" #'evil-window-down
 :n "C-k" #'evil-window-up
 :n "C-l" #'evil-window-right
 )
#+END_SRC

The above only works in normal mode.  We have to add the same mapping for the treemacs mode.

#+BEGIN_SRC emacs-lisp
(map!
 (:map evil-treemacs-state-map
       "C-h" #'evil-window-left
       "C-l" #'evil-window-right)
 )
#+END_SRC

* Display
** Window Size and Position

This is from https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#center-emacs-initial-frame-with-a-fixed-size
#+BEGIN_SRC emacs-lisp
;; On startup, restore the last-used window size and position
(when-let (dims (doom-store-get 'last-frame-size))
  (cl-destructuring-bind ((left . top) width height fullscreen) dims
    (setq initial-frame-alist
          (append initial-frame-alist
                  `((left . ,left)
                    (top . ,top)
                    (width . ,width)
                    (height . ,height)
                    (fullscreen . ,fullscreen))))))

(defun save-frame-dimensions ()
  (doom-store-put 'last-frame-size
                  (list (frame-position)
                        (frame-width)
                        (frame-height)
                        (frame-parameter nil 'fullscreen))))

;; When we kill emacs, save the current window size and position
(add-hook 'kill-emacs-hook #'save-frame-dimensions)
#+END_SRC
** Font and font sizing

TODO: Change font depending on OS?

#+BEGIN_SRC elisp
;; Add a small amount of extra space in between each line
(setq line-spacing 2)
#+END_SRC
** Theme

Lots of doom-specific themes available at https://github.com/hlissner/emacs-doom-themes
Screenshots available at: https://github.com/hlissner/emacs-doom-themes/tree/screenshots

Themes I like so far:

- doom-one - default theme, a little too dark for the comments
- doom-vibrant - almost the same as the default theme, but a little brighter
- doom-horizon - dark, more colorful than vibrant
- doom-tomorrow-night
- doom-material

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
(load-theme doom-theme t)
#+END_SRC
** Move to new split windows

#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC
* Editing
** Tabs vs Spaces

Use spaces instead of tabs by default, and set the default indent width to 2.  The =editorconfig= package/module should allow this to be overriden per project or repository.

- [ ] TODO:  Some languages like go want to use tabs by default, I should make sure that still happens.
- [ ] TODO:  =tab-width= only affects display, not actual number of spaces afaik

#+BEGIN_SRC elisp
(setq indent-tabs-mode nil
      tab-width 2)
#+END_SRC
** Refresh buffer on external file changes

From https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org - automatically refresh the buffer if a file is changed outside of emacs.

#+BEGIN_SRC elisp
(use-package! autorevert
  :defer t
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        auto-revert-verbose nil))
#+END_SRC

* Version Control
** magit

#+BEGIN_SRC emacs-lisp
;; Set the directory where magit looks for repos in
(setq magit-repository-directories '("~/dev/"))
#+END_SRC

Show gravatars for commit authors
#+BEGIN_SRC emacs-lisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC
** treemacs-magit
#+BEGIN_SRC emacs-lisp
(use-package! treemacs-magit
  :defer t
  :after (treemacs magit))
#+END_SRC
* Projectile

Use =SPC p D= to run discover projects in the search path.

This seems to only search one folder deep, so if you use a path of =~/dev= it detects =~/dev/proj1= but it will not detect something like =~/dev/clients/clientA/proj2=.

- [X] TODO: Can I use wildcards somehow?
- [ ] TODO: Discover projects in ~/dev/*/*/* (2 or 3 levels nested)

#+BEGIN_SRC emacs-lisp
;; (setq projectile-project-search-path '("~/dev/" "~/dev/clients/"))
;; Found on https://github.com/bbatsov/projectile/issues/1500
;; TODO: This still isn't recursive more than one level
(setq projectile-project-search-path (cddr (directory-files "~/dev" t)))
#+END_SRC
* Tramp

#+BEGIN_SRC emacs-lisp
;; Use /sshx because /ssh doesn't seem to work on bsd, and some of my
;; remote shells don't use sh/bash.  ssh/sshx should also be faster than scp
(setq tramp-default-method "sshx")
#+END_SRC
* Tags

I have a custom configuration for ctags stored in [[file:~/.ctags][~/.ctags]] that works with some additional languages like terraform, and excludes a lot of things like =node_modules= and =.terraform/modules= which causes the tags file to be too large.

#+BEGIN_SRC emacs-lisp
;; Use my default ctags configuration which excludes a lot of things we don't want
(setq projectile-tags-command "ctags --options=~/.ctags -Re -f \"%s\" %s \"%s\"")
#+END_SRC
* evil-snipe

#+BEGIN_SRC emacs-lisp
(use-package! evil-snipe
  :defer t
  :config
  ;; Alias [ and ] to all types of brackets
  ;; With this, I can use evil-snipe by pressing f and then [ and it will search for any of these types of brackets
  (push '(?\[ "[[{(]") evil-snipe-aliases)
  (push '(?\] "[]})]") evil-snipe-aliases)
  (setq evil-snipe-scope 'visible)
  (setq evil-snipe-repeat-scope 'buffer)
  (setq evil-snipe-spillover-scope 'whole-buffer))
#+END_SRC
* Backups and history

#+BEGIN_SRC emacs-lisp
;; Save backups in one place
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; TODO: I'm not sure if I need this anymore?  It was originally because of Nextcloud having issues with my .org files
;; Disable lock files
;; (setq create-lockfiles nil)
#+END_SRC

I was running into issues with Emacs using up 100% of my cpu for a while when it was basically idle.  One of the issues ended up being that there was no history limit, or it was really long.

#+BEGIN_SRC emacs-lisp
;; Try to prevent emacs from using 100% cpu due to autosave
;; See https://github.com/syl20bnr/spacemacs/issues/9409
(setq history-length 350)
(put 'minibuffer-history 'history-length 50)
(put 'evil-ex-history 'history-length 50)
(put 'kill-ring 'history-length 25)
#+END_SRC

From https://gitlab.com/justinekizhak/dotfiles/blob/master/emacs/doom.d/config.org
#+BEGIN_SRC emacs-lisp
(use-package! recentf
  :defer t
  :ensure nil
  :hook (after-init . recentf-mode)
  :custom
  (recentf-auto-cleanup "05:00am")
  (recentf-max-saved-items 200)
  (recentf-exclude '((expand-file-name package-user-dir)
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "COMMIT_EDITMSG\\'")))

;; When buffer is closed, saves the cursor location
(save-place-mode 1)
#+END_SRC
* Hydra Paste

From https://github.com/hlissner/doom-emacs/blob/develop/docs/api.org#create-a-paste-transient-state-to-cycle-through-kill-ring-on-paste

This lets me paste something and then cycle through the kill ring.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-paste (:color red
                       :hint nil)
  "\n[%s(length kill-ring-yank-pointer)/%s(length kill-ring)] \
 [_C-j_/_C-k_] cycles through yanked text, [_p_/_P_] pastes the same text \
 above or below. Anything else exits."
  ("C-j" evil-paste-pop)
  ("C-k" evil-paste-pop-next)
  ("p" evil-paste-after)
  ("P" evil-paste-before))

(map! :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)
#+END_SRC
* Avy

Search all open windows
#+BEGIN_SRC elisp
(setq avy-all-windows t)
#+END_SRC
